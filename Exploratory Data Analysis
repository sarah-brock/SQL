-- Exploratory Data Analysis Project
-- This project is using the dataset that I previously cleaned - https://github.com/sarah-brock/SQL/blob/main/Data%20Cleaning
-- Original dataset: https://www.kaggle.com/datasets/swaptr/layoffs-2022


-- First, I will explore the data and find trends or patterns or anything interesting like outliers

SELECT *
FROM layoffs_staging2
;

SELECT MAX(total_laid_off), MAX(percentage_laid_off)
FROM layoffs_staging2;

-- Here I am looking at which companies had percentage laid off = 1, which means 100% of the company was laid off

SELECT *
FROM layoffs_staging2
WHERE percentage_laid_off = 1
ORDER BY total_laid_off DESC;

-- Below, I converted the columns that have numbers in them to integer columns. When they imported from the dataset, they imported as text columns

ALTER TABLE layoffs_staging2
MODIFY total_laid_off INT;

SELECT *
FROM layoffs_staging2
WHERE percentage_laid_off = 1
ORDER BY funds_raised_millions DESC;

DESCRIBE layoffs_staging2;

ALTER TABLE layoffs_staging2
MODIFY funds_raised_millions DECIMAL(10,2);

-- Below, you can see that there were a lot of big company names with layoffs

SELECT company, SUM(total_laid_off)
FROM layoffs_staging2
GROUP BY company
ORDER BY 2 DESC;

-- Looking at the date range of this dataset below, it looks like this ranges from March 2020 - March 2023, during the peak of COVID-19

SELECT MIN(`date`), MAX(`date`)
FROM layoffs_staging2;

-- Now I am looking at which industries were most effected by layoffs. It looks like consumer and retail had the most layoffs

SELECT industry, SUM(total_laid_off)
FROM layoffs_staging2
GROUP BY industry
ORDER BY 2 DESC;

-- Below I am looking at which countries had the most layoffs

SELECT country, SUM(total_laid_off)
FROM layoffs_staging2
GROUP BY country
ORDER BY 2 DESC;

-- Here I am looking at the sum of layoffs for each year

SELECT YEAR(`date`), SUM(total_laid_off)
FROM layoffs_staging2
GROUP BY YEAR(`date`)
ORDER BY 1 DESC;

-- Now I will look at the company stage

SELECT stage, SUM(total_laid_off)
FROM layoffs_staging2
GROUP BY stage
ORDER BY 2 DESC;

-- Now I want to look at the rolling total of layoffs by month

SELECT company, SUM(total_laid_off)
FROM layoffs_staging2
GROUP BY company
ORDER BY 2 DESC;

SELECT SUBSTRING(`date`,1,7) AS `MONTH`, SUM(total_laid_off)
FROM layoffs_staging2
WHERE SUBSTRING(`date`,1,7) IS NOT NULL
GROUP BY `MONTH`
ORDER BY 1 ASC
;

WITH Rolling_Total AS
(
SELECT SUBSTRING(`date`,1,7) AS `MONTH`, SUM(total_laid_off) AS total_off
FROM layoffs_staging2
WHERE SUBSTRING(`date`,1,7) IS NOT NULL
GROUP BY `MONTH`
ORDER BY 1 ASC
)
SELECT `MONTH`, total_off
,SUM(total_off) OVER(ORDER BY `MONTH`) AS rolling_total
FROM Rolling_Total
;

-- Below, I will look at companies laid off by year

SELECT company, YEAR(`date`), SUM(total_laid_off)
FROM layoffs_staging2
GROUP BY company, YEAR(`date`)
ORDER BY 3 DESC
;

-- Now I am going to give these companies/layoffs a ranking. The highest number of layoffs will be #1, and it will be separated by year

WITH Company_Year (company, years, total_laid_off) AS
(
SELECT company, YEAR(`date`), SUM(total_laid_off)
FROM layoffs_staging2
GROUP BY company, YEAR(`date`)
), Company_Year_Rank AS
(SELECT *, 
DENSE_RANK() OVER(PARTITION BY years ORDER BY total_laid_off DESC) AS Ranking
FROM Company_Year
WHERE years IS NOT NULL
ORDER BY Ranking ASC)
SELECT *
FROM Company_Year_Rank
WHERE Ranking <= 5;
